package com.taiko.noblenote.editor;

/*
 * Copyright (C) 2007 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.text.Editable;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.TextUtils;
import android.text.style.AbsoluteSizeSpan;
import android.text.style.AlignmentSpan;
import android.text.style.BackgroundColorSpan;
import android.text.style.CharacterStyle;
import android.text.style.ForegroundColorSpan;
import android.text.style.ImageSpan;
import android.text.style.ParagraphStyle;
import android.text.style.QuoteSpan;
import android.text.style.RelativeSizeSpan;
import android.text.style.StrikethroughSpan;
import android.text.style.StyleSpan;
import android.text.style.SubscriptSpan;
import android.text.style.SuperscriptSpan;
import android.text.style.TextAppearanceSpan;
import android.text.style.TypefaceSpan;
import android.text.style.URLSpan;
import android.text.style.UnderlineSpan;

import org.ccil.cowan.tagsoup.HTMLSchema;
import org.ccil.cowan.tagsoup.Parser;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

import java.io.IOException;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map.Entry;

/**
 * This class is based on the android HTML class but modified to support css styles that are generated by Qt Framework classes' html export
 * and to export CSS styles
 *
 * As of Android 8 Nougat, some css styles like ForegroundColor and BackgroundColor are also supported by the native Html.java class
*/

/**
 * This class processes HTML strings into displayable styled text.
 * Not all HTML tags are supported.
 */
public class Html {
    /**
     * Retrieves images for HTML &lt;img&gt; tags.
     */
    public interface ImageGetter {
        /**
         * This methos is called when the HTML parser encounters an
         * &lt;img&gt; tag.  The <code>source</code> argument is the
         * string from the "src" attribute; the return value should be
         * a Drawable representation of the image or <code>null</code>
         * for a generic replacement image.  Make sure you call
         * setBounds() on your Drawable if it doesn't already have
         * its bounds set.
         */
        Drawable getDrawable(String source);
    }

    /**
     * Is notified when HTML tags are encountered that the parser does
     * not know how to interpret.
     */
    interface TagHandler {
        /**
         * This method will be called whenn the HTML parser encounters
         * a tag that it does not know how to interpret.
         */
        public void handleTag(boolean opening, String tag,
                                 Editable output, XMLReader xmlReader);
    }

	private static Object displayDensity;

    private Html() { }
    
    /**
     * the endSpan method will assume this point size as the default point size and set different point sizes
     * relative to this point size
     */
   // protected final static int FONT_POINT_SIZE = 10;
    
    /**
     * by default, this Html class uses AbsoluteSizeSpan(fontSize*6) with 6 as a scaling factor
     * ABSOLUTESIZESPAN_SCALE_FACTOR is a variable to set the scaling factor
     * this still does not fix the problem that AbsoluteSizeSpan does by default use device pixels and not dp
     */
    protected final static float ABSOLUTESIZESPAN_SCALE_FACTOR = 1.0f; 
    protected final static float TEST_DPI = 2.0f;
    
    protected final static String P_START_TAG = "<p style=\" margin-top:0px; margin-bottom:0px;\">";
    protected final static String EMPTY_PARAGRAPH = "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px;\"><br /></p>";

    /**
     * Returns displayable styled text from the provided HTML string.
     * Any &lt;img&gt; tags in the HTML will display as a generic
     * replacement image which your program can then go through and
     * replace with real images.
     *
     * <p>This uses TagSoup to handle real HTML, including all of the brokenness found in the wild.
     */
    public static Spanned fromHtml(String source, float displayDensity) {
        return fromHtml(source, null, null,displayDensity);
    }

    /**
     * Lazy initialization holder for HTML parser. This class will
     * a) be preloaded by the zygote, or b) not loaded until absolutely
     * necessary.
     */
    private static class HtmlParser {
        private static final HTMLSchema schema = new HTMLSchema();
    }

    /**
     * Returns displayable styled text from the provided HTML string.
     * Any &lt;img&gt; tags in the HTML will use the specified ImageGetter
     * to request a representation of the image (use null if you don't
     * want this) and the specified TagHandler to handle unknown tags
     * (specify null if you don't want this).
     *
     * <p>This uses TagSoup to handle real HTML, including all of the brokenness found in the wild.
     */
    public static Spanned fromHtml(String source, ImageGetter imageGetter,
                                   TagHandler tagHandler, float displayDensity) {
        Parser parser = new Parser();
        try {
            parser.setProperty(Parser.schemaProperty, HtmlParser.schema);
        } catch (org.xml.sax.SAXNotRecognizedException e) {
            // Should not happen.
            throw new RuntimeException(e);
        } catch (org.xml.sax.SAXNotSupportedException e) {
            // Should not happen.
            throw new RuntimeException(e);
        }

        HtmlToSpannedConverter converter =
                new HtmlToSpannedConverter(source, imageGetter, tagHandler,
                        parser, displayDensity);
        return converter.convert();
    }

    /**
     * Returns an HTML representation of the provided Spanned text.
     * @param displayDensity use getContext().getResources().getDisplayMetrics().density;
     */
    public static String toHtml(Spanned text, float displayDensity) {
        StringBuilder out = new StringBuilder();
        withinHtml(out, text, displayDensity);
        return out.toString();
    }
    
    /**
     * Returns an HTML escaped representation of the given plain text.
     */
    public static String escapeHtml(CharSequence text) {
        StringBuilder out = new StringBuilder();
        withinStyle(out, text, 0, text.length());
        return out.toString();
    }

    private static void withinHtml(StringBuilder out, Spanned text, float displayDensity) {
        int len = text.length();

        int next;
        for (int i = 0; i < text.length(); i = next) {
            next = text.nextSpanTransition(i, len, ParagraphStyle.class);
            ParagraphStyle[] style = text.getSpans(i, next, ParagraphStyle.class);
            String elements = " ";
            boolean needDiv = false;

            for(int j = 0; j < style.length; j++) {
                if (style[j] instanceof AlignmentSpan) {
                    Layout.Alignment align = 
                        ((AlignmentSpan) style[j]).getAlignment();
                    needDiv = true;
                    if (align == Layout.Alignment.ALIGN_CENTER) {
                        elements = "align=\"center\" " + elements;
                    } else if (align == Layout.Alignment.ALIGN_OPPOSITE) {
                        elements = "align=\"right\" " + elements;
                    } else {
                        elements = "align=\"left\" " + elements;
                    }
                }
            }
            if (needDiv) {
                out.append("<div " + elements + ">");
            }

            withinDiv(out, text, i, next, displayDensity);

            if (needDiv) {
                out.append("</div>");
            }
        }
    }

    private static void withinDiv(StringBuilder out, Spanned text,
            int start, int end, float displayDensity) {
        int next;
        for (int i = start; i < end; i = next) {
            next = text.nextSpanTransition(i, end, QuoteSpan.class);
            QuoteSpan[] quotes = text.getSpans(i, next, QuoteSpan.class);

            for (QuoteSpan quote: quotes) {
                out.append("<blockquote>");
            }

            withinBlockquote(out, text, i, next, displayDensity);

            for (QuoteSpan quote: quotes) {
                out.append("</blockquote>\n");
            }
        }
    }

    private static void withinBlockquote(StringBuilder out, Spanned text,
                                         int start, int end, float displayDensity) {
        out.append(P_START_TAG);

        int next;
        for (int i = start; i < end; i = next) {
            next = TextUtils.indexOf(text, '\n', i, end);
            if (next < 0) {
                next = end;
            }

            int nl = 0;

            while (next < end && text.charAt(next) == '\n') {
                nl++;
                next++;
            }

            withinParagraph(out, text, i, next - nl, nl, next == end, displayDensity);
        }

        out.append("</p>\n");
    }

    private static void withinParagraph(StringBuilder out, Spanned text,
                                        int start, int end, int nl,
                                        boolean last, float displayDensity) {
        int next;
        for (int i = start; i < end; i = next) {
            next = text.nextSpanTransition(i, end, CharacterStyle.class);
            CharacterStyle[] style = text.getSpans(i, next,
                                                   CharacterStyle.class);

            for (int j = 0; j < style.length; j++) {
                if (style[j] instanceof StyleSpan) {
                    int s = ((StyleSpan) style[j]).getStyle();

                    if ((s & Typeface.BOLD) != 0) {
                        out.append("<b>");
                    }
                    if ((s & Typeface.ITALIC) != 0) {
                        out.append("<i>");
                    }
                }
                if (style[j] instanceof TypefaceSpan) {
                    String s = ((TypefaceSpan) style[j]).getFamily();

                    if (s.equals("monospace")) {
                        out.append("<tt>");
                    }
                }
                if (style[j] instanceof SuperscriptSpan) {
                    out.append("<sup>");
                }
                if (style[j] instanceof SubscriptSpan) {
                    out.append("<sub>");
                }
                if (style[j] instanceof UnderlineSpan) {
                    out.append("<u>");
                }
                if (style[j] instanceof StrikethroughSpan) {
                    //out.append("<strike>"); // default
                	out.append("<s>"); // but Qt's html parser only supports <s>
                }
                if (style[j] instanceof URLSpan) {
                    out.append("<a href=\"");
                    out.append(((URLSpan) style[j]).getURL());
                    out.append("\">");
                }
                if (style[j] instanceof ImageSpan) {
                    out.append("<img src=\"");
                    out.append(((ImageSpan) style[j]).getSource());
                    out.append("\">");

                    // Don't output the dummy character underlying the image.
                    i = next;
                }
                if (style[j] instanceof AbsoluteSizeSpan) {
                    out.append("<font size =\"");
                    // pixels = dps * (density / 160), AbsoluteSizeSpan.getSize() returns pixels
                    out.append(Math.round(Html.convertPixtoDip(((AbsoluteSizeSpan)style[j]).getSize(), displayDensity) / ABSOLUTESIZESPAN_SCALE_FACTOR));
                    out.append("\">");
                }
                
                // currently unused because endSpan uses AbsoluteSizeSpan
                if (style[j] instanceof RelativeSizeSpan) {
                    out.append("<font size =\"");
                    int size = (int)(((RelativeSizeSpan) style[j]).getSizeChange() * 10.0f);
                    out.append( size );
                    //out.append(((AbsoluteSizeSpan) style[j]).getSize());
                    out.append("\">");
                }
                if (style[j] instanceof ForegroundColorSpan) {
                    out.append("<font color =\"#");
                    String color = Integer.toHexString(((ForegroundColorSpan)
                            style[j]).getForegroundColor() + 0x01000000);
                    while (color.length() < 6) {
                        color = "0" + color;
                    }
                    out.append(color);
                    out.append("\">");
                }
                if (style[j] instanceof BackgroundColorSpan) {
                	out.append("<span style =\"background-color:#");
                    String color = Integer.toHexString(((BackgroundColorSpan)
                            style[j]).getBackgroundColor() + 0x01000000);
                    while (color.length() < 6) {
                        color = "0" + color;
                    }
                    out.append(color);
                    out.append("\">");
                }
            }

            withinStyle(out, text, i, next);

            for (int j = style.length - 1; j >= 0; j--) {
            	if (style[j] instanceof BackgroundColorSpan){
            		out.append("</span>"); // only BackgroundColorSpan currently uses the span element 
            	}
                if (style[j] instanceof ForegroundColorSpan) {
                    out.append("</font>");
                }
                if (style[j] instanceof AbsoluteSizeSpan) {
                    out.append("</font>");
                }
                if (style[j] instanceof URLSpan) {
                    out.append("</a>");
                }
                if (style[j] instanceof StrikethroughSpan) {
                    //out.append("</strike>");
                	out.append("</s>");
                }
                if (style[j] instanceof UnderlineSpan) {
                    out.append("</u>");
                }
                if (style[j] instanceof SubscriptSpan) {
                    out.append("</sub>");
                }
                if (style[j] instanceof SuperscriptSpan) {
                    out.append("</sup>");
                }
                if (style[j] instanceof TypefaceSpan) {
                    String s = ((TypefaceSpan) style[j]).getFamily();

                    if (s.equals("monospace")) {
                        out.append("</tt>");
                    }
                }
                if (style[j] instanceof StyleSpan) {
                    int s = ((StyleSpan) style[j]).getStyle();

                    if ((s & Typeface.BOLD) != 0) {
                        out.append("</b>");
                    }
                    if ((s & Typeface.ITALIC) != 0) {
                        out.append("</i>");
                    }
                }
            }
        }

        //String p = last ? "" : "</p>\n<p>";
        String p = last ? "" : P_START_TAG;

//        if (nl == 1) 
//        {
//            out.append("<br>\n");
//        } 
//        else if (nl == 2) 
//        {
//            out.append(p);
//        } 
//        else 
//        {
//            for (int i = 2; i < nl; i++) {
//                out.append("<br>");
//            }
//
//            out.append(p);
//        }
        if(nl == 1)
        {
        	out.append("</p>\n" + P_START_TAG);
        }
        else
        {
        	out.append("</p>\n");
        	for (int i = 1; i < nl; i++) {
              out.append(EMPTY_PARAGRAPH + '\n');
          }
        	
        	out.append(p);
        }
    }

    private static void withinStyle(StringBuilder out, CharSequence text,
                                    int start, int end) {
        for (int i = start; i < end; i++) {
            char c = text.charAt(i);

            if (c == '<') {
                out.append("&lt;");
            } else if (c == '>') {
                out.append("&gt;");
            } else if (c == '&') {
                out.append("&amp;");
            } else if (c > 0x7E || c < ' ') {
                out.append("&#" + ((int) c) + ";");
            } else if (c == ' ') {
                while (i + 1 < end && text.charAt(i + 1) == ' ') {
                    out.append("&nbsp;");
                    i++;
                }

                out.append(' ');
            } else {
                out.append(c);
            }
        }
    }
    
    public static float convertPixtoDip(int pixel, float density){
        return (float)pixel/density;
    }
}

class HtmlToSpannedConverter implements ContentHandler {

    private static final float[] HEADER_SIZES = {
        1.5f, 1.4f, 1.3f, 1.2f, 1.1f, 1f,
    };

    private String mSource;
    private XMLReader mReader;
    private SpannableStringBuilder mSpannableStringBuilder;
    private Html.ImageGetter mImageGetter;
    private Html.TagHandler mTagHandler;
	private float mDisplayDensity;

    public HtmlToSpannedConverter(
            String source, Html.ImageGetter imageGetter, Html.TagHandler tagHandler,
            Parser parser, float displayDensity) {
        mSource = source;
        mSpannableStringBuilder = new SpannableStringBuilder();
        mImageGetter = imageGetter;
        mTagHandler = tagHandler;
        mReader = parser;
        mDisplayDensity = displayDensity;
    }

    public Spanned convert() {

        mReader.setContentHandler(this);
        try {
            mReader.parse(new InputSource(new StringReader(mSource)));
        } catch (IOException e) {
            // We are reading from a string. There should not be IO problems.
            throw new RuntimeException(e);
        } catch (SAXException e) {
            // TagSoup doesn't throw parse exceptions.
            throw new RuntimeException(e);
        }

        // Fix flags and range for paragraph-type markup.
        Object[] obj = mSpannableStringBuilder.getSpans(0, mSpannableStringBuilder.length(), ParagraphStyle.class);
        for (int i = 0; i < obj.length; i++) {
            int start = mSpannableStringBuilder.getSpanStart(obj[i]);
            int end = mSpannableStringBuilder.getSpanEnd(obj[i]);

            // If the last line of the range is blank, back off by one.
            if (end - 2 >= 0) {
                if (mSpannableStringBuilder.charAt(end - 1) == '\n' &&
                    mSpannableStringBuilder.charAt(end - 2) == '\n') {
                    end--;
                }
            }

            if (end == start) {
                mSpannableStringBuilder.removeSpan(obj[i]);
            } else {
                mSpannableStringBuilder.setSpan(obj[i], start, end, Spannable.SPAN_PARAGRAPH);
            }
        }

        return mSpannableStringBuilder;
    }

    private void handleStartTag(String tag, Attributes attributes) {
        if (tag.equalsIgnoreCase("br")) {
            // We don't need to handle this. TagSoup will ensure that there's a </br> for each <br>
            // so we can safely emite the linebreaks when we handle the close tag.
        } else if (tag.equalsIgnoreCase("p")) {
        	handleStartP(mSpannableStringBuilder,attributes);
        } else if (tag.equalsIgnoreCase("div")) {
            handleP(mSpannableStringBuilder);
        } else if (tag.equalsIgnoreCase("em")) {
            start(mSpannableStringBuilder, new Bold());
        } else if (tag.equalsIgnoreCase("b")) {
            start(mSpannableStringBuilder, new Bold());
        } else if (tag.equalsIgnoreCase("strong")) {
            start(mSpannableStringBuilder, new Italic());
        } else if (tag.equalsIgnoreCase("cite")) {
            start(mSpannableStringBuilder, new Italic());
        } else if (tag.equalsIgnoreCase("dfn")) {
            start(mSpannableStringBuilder, new Italic());
        } else if (tag.equalsIgnoreCase("i")) {
            start(mSpannableStringBuilder, new Italic());
        } else if(tag.equalsIgnoreCase("s")) {
        	start(mSpannableStringBuilder, new Strikethrough());
        } else if(tag.equalsIgnoreCase("strike")) {
        	start(mSpannableStringBuilder, new Strikethrough());
        } else if (tag.equalsIgnoreCase("big")) {
            start(mSpannableStringBuilder, new Big());
        } else if (tag.equalsIgnoreCase("small")) {
            start(mSpannableStringBuilder, new Small());
        } else if (tag.equalsIgnoreCase("font")) {
            startFont(mSpannableStringBuilder, attributes);
        } else if (tag.equalsIgnoreCase("blockquote")) {
            handleP(mSpannableStringBuilder);
            start(mSpannableStringBuilder, new Blockquote());
        } else if (tag.equalsIgnoreCase("tt")) {
            start(mSpannableStringBuilder, new Monospace());
        } else if (tag.equalsIgnoreCase("a")) {
            startA(mSpannableStringBuilder, attributes);
        } else if (tag.equalsIgnoreCase("u")) {
            start(mSpannableStringBuilder, new Underline());
        } else if (tag.equalsIgnoreCase("sup")) {
            start(mSpannableStringBuilder, new Super());
        } else if (tag.equalsIgnoreCase("sub")) {
            start(mSpannableStringBuilder, new Sub());
        } else if (tag.equalsIgnoreCase("span")) {
        	startSpan(mSpannableStringBuilder,attributes); 
        } else if (tag.equalsIgnoreCase("style") || tag.equalsIgnoreCase("title")) {
        	mReader.setContentHandler(new IgnoringContentHandler(mReader,this));	        
        } else if (tag.length() == 2 &&
                   Character.toLowerCase(tag.charAt(0)) == 'h' &&
                   tag.charAt(1) >= '1' && tag.charAt(1) <= '6') {
            handleP(mSpannableStringBuilder);
            start(mSpannableStringBuilder, new Header(tag.charAt(1) - '1'));
        } else if (tag.equalsIgnoreCase("img")) {
            startImg(mSpannableStringBuilder, attributes, mImageGetter);
        } else if (mTagHandler != null) {
            mTagHandler.handleTag(true, tag, mSpannableStringBuilder, mReader);
        }
    }
    
    // css style information is stored in a string between the calls to startSpan and endSpan tags
    // e.g. <span style=" font-style:italic;">italic text</span>
    // because formatting is applied in the endSpan method

    private static void startSpan(SpannableStringBuilder mSpannableStringBuilder2,
			Attributes attributes) {
		String attr = attributes.getValue("","style");
		start(mSpannableStringBuilder2, attr);
	}
    
    private static void endSpan(SpannableStringBuilder text, float displayDensity) 
    {
		int len = text.length();
        Object obj = getLast(text, String.class);
        int where = text.getSpanStart(obj);

        text.removeSpan(obj);
        
        if (where == len)
        	return;
        
        
	    String attr = (String)obj;
	    if(attr == null)
	    	return;
	    
	   HashMap<String, String> tokenMap = tokenizeStyle(attr);
	   for(Entry<String, String> entry : tokenMap.entrySet())
	   {
		   if(entry.getKey().equalsIgnoreCase("text-decoration"))
		   {
			   if(entry.getValue().equalsIgnoreCase("underline"))
				   text.setSpan(new UnderlineSpan(), where, len, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
			   else if(entry.getValue().equalsIgnoreCase("line-through"))
				   text.setSpan(new StrikethroughSpan(), where, len, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		   }
		   
		   else if(entry.getKey().equalsIgnoreCase("font-style"))
		   {
			   if(entry.getValue().equalsIgnoreCase("italic"))
				   text.setSpan(new StyleSpan(Typeface.ITALIC), where, len, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		   }

		   else if(entry.getKey().equalsIgnoreCase("font-weight"))
		   {
			   int weight = 0;
			   try{ weight = Integer.parseInt(entry.getValue()); } catch(NumberFormatException e){}
			   if(weight >= 600)
				   text.setSpan(new StyleSpan(Typeface.BOLD), where, len, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);	
		   }

		   else if(entry.getKey().equalsIgnoreCase("background-color"))
		   {
			   int c = getHtmlColor(entry.getValue());
               if (c != -1) {
                   text.setSpan(new BackgroundColorSpan(c | 0xFF000000), // or together opaque alpha channel
                           where, len,
                           Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
               }
		   } 
		   
		   else if(entry.getKey().equalsIgnoreCase("color"))
		   {
			   int c = getHtmlColor(entry.getValue());
               if (c != -1) {
                   text.setSpan(new ForegroundColorSpan(c | 0xFF000000),
                           where, len,
                           Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
               }
		   } 
		   
		   else if(entry.getKey().equalsIgnoreCase("font-size"))
		   {
			   String fontStr = entry.getValue();
			   if(fontStr.endsWith("pt"))
				   fontStr = fontStr.substring(0,fontStr.length()-2);
			   int pointSize = 0;
			   try{ pointSize = Integer.parseInt(fontStr); } catch(NumberFormatException e){}
			   //text.setSpan(new RelativeSizeSpan(size), where, len, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
			   text.setSpan(new AbsoluteSizeSpan(Math.round((float)pointSize*displayDensity),true), where, len, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		   }
	   }
	}

	private void handleEndTag(String tag) {
        if (tag.equalsIgnoreCase("br")) {
            handleBr(mSpannableStringBuilder);
        } else if (tag.equalsIgnoreCase("p")) {
            handleEndP(mSpannableStringBuilder);
        } else if (tag.equalsIgnoreCase("div")) {
            handleP(mSpannableStringBuilder);
        } else if (tag.equalsIgnoreCase("em")) {
            end(mSpannableStringBuilder, Bold.class, new StyleSpan(Typeface.BOLD));
        } else if (tag.equalsIgnoreCase("b")) {
            end(mSpannableStringBuilder, Bold.class, new StyleSpan(Typeface.BOLD));
        } else if (tag.equalsIgnoreCase("strong")) {
            end(mSpannableStringBuilder, Italic.class, new StyleSpan(Typeface.ITALIC));
        } else if (tag.equalsIgnoreCase("cite")) {
            end(mSpannableStringBuilder, Italic.class, new StyleSpan(Typeface.ITALIC));
        } else if (tag.equalsIgnoreCase("dfn")) {
            end(mSpannableStringBuilder, Italic.class, new StyleSpan(Typeface.ITALIC));
        } else if (tag.equalsIgnoreCase("i")) {
            end(mSpannableStringBuilder, Italic.class, new StyleSpan(Typeface.ITALIC));
        } else if(tag.equalsIgnoreCase("s")) {
            end(mSpannableStringBuilder, Strikethrough.class, new StrikethroughSpan());
	    } else if (tag.equalsIgnoreCase("strike")) {
            end(mSpannableStringBuilder, Strikethrough.class, new StrikethroughSpan());            
        } else if (tag.equalsIgnoreCase("big")) {
            end(mSpannableStringBuilder, Big.class, new RelativeSizeSpan(1.25f));
        } else if (tag.equalsIgnoreCase("small")) {
            end(mSpannableStringBuilder, Small.class, new RelativeSizeSpan(0.8f));
        } else if (tag.equalsIgnoreCase("font")) {
            endFont(mSpannableStringBuilder, mDisplayDensity);
        } else if (tag.equalsIgnoreCase("blockquote")) {
            handleP(mSpannableStringBuilder);
            end(mSpannableStringBuilder, Blockquote.class, new QuoteSpan());
        } else if (tag.equalsIgnoreCase("tt")) {
            end(mSpannableStringBuilder, Monospace.class,
                    new TypefaceSpan("monospace"));
        } else if (tag.equalsIgnoreCase("a")) {
            endA(mSpannableStringBuilder);
        } else if (tag.equalsIgnoreCase("u")) {
            end(mSpannableStringBuilder, Underline.class, new UnderlineSpan());
        } else if (tag.equalsIgnoreCase("sup")) {
            end(mSpannableStringBuilder, Super.class, new SuperscriptSpan());
        } else if (tag.equalsIgnoreCase("sub")) {
            end(mSpannableStringBuilder, Sub.class, new SubscriptSpan());
        } else if (tag.equalsIgnoreCase("span")) {
        	endSpan(mSpannableStringBuilder, mDisplayDensity);  
        } else if (tag.equalsIgnoreCase("style")) {
        	
        } else if (tag.length() == 2 &&
                Character.toLowerCase(tag.charAt(0)) == 'h' &&
                tag.charAt(1) >= '1' && tag.charAt(1) <= '6') {
            handleP(mSpannableStringBuilder);
            endHeader(mSpannableStringBuilder);
        } else if (mTagHandler != null) {
            mTagHandler.handleTag(false, tag, mSpannableStringBuilder, mReader);
        }
    }
	
	// dont automatically insert a newline before this paragraph because
	// the last paragraph may have the marginBottom:0 attribute set
	private static void handleStartP(SpannableStringBuilder text, Attributes attributes)
	{
		
		String attr = attributes.getValue("", "style");
		if(attr == null)
		{
			handleP(text); // resort to default method
			return;
		}
		HashMap<String, String> tokenMap = tokenizeStyle(attr);	
		
		int len = text.length();
		// check if margin-top is 0px
		boolean marginTopIsZero = false;
		String marginTop= tokenMap.get("margin-top");
		if(marginTop != null && marginTop.endsWith("px"))
		{
					marginTop = marginTop.substring(0,marginTop.length()-2);
						try{ 
							marginTopIsZero = Integer.parseInt(marginTop) <= 0;
							} 
						catch(NumberFormatException e){}
		}
		
		if(marginTopIsZero)
		{
			// if marginTop:0 start in the next line if there is not already a line break
	        if (len >= 1 && text.charAt(len - 1) != '\n') 
	        {
	        	text.append('\n');
	        }
	    }
		else 
		{
			text.append('\n');			
		}
		
		// check if margin-bottom is 0px
		String marginBottom = tokenMap.get("margin-bottom");
		if(marginBottom != null && marginBottom.endsWith("px"))
		{
					marginBottom = marginBottom.substring(0,marginBottom.length()-2);
						try{ 
							if(Integer.parseInt(marginBottom) == 0)
							{
								Margin m = new Margin();
								m.bottom = 0;
						        text.setSpan(m,len, len, Spannable.SPAN_MARK_MARK);
								return; 
							}
							} 
						catch(NumberFormatException e){}
		}
		
		handleP(text); // resort to default method
	}
	
	private static void handleEndP(SpannableStringBuilder text)
	{
		Object obj = getLast(text, Margin.class);
		if(obj != null)
		{
			int len = text.length();
			text.removeSpan(obj);
			Margin mb = (Margin)obj;
			if(mb.bottom == 0) // a marginBottom of 0 reduces the space under the paragraph block to 0 
			{
				 if (len >= 1 && text.charAt(len - 1) != '\n') 
			        {
			        	text.append('\n');
			        }  
			}
			else // does not handle negative or positive values
			{
				text.append("\n\n"); // fallback paragraph
			} 
		}
		else
		{
			text.append("\n\n");  // fallback paragraph
		}
		
	}

	// TODO remove margin bottom stuff and BrMark shoud be removed after it has been read
	private static void handleP(SpannableStringBuilder text) {
        int len = text.length();
        
        // this ensures that there's exactly one double line break \n\n after the following transition </p><p>
        // but fails after something like this <br><br></p><p>
        // for ever <br> a BrMark is added to differentiate between '\n' from <br> and '\n' from <p>
        if (len >= 1 && text.getSpans(len-1, len-1, BrMark.class).length == 0 &&  text.charAt(len - 1) == '\n') {
            if (len >= 2 && text.charAt(len - 2) == '\n') {
                return;
            }

            text.append("\n");
            return;
        }
        
        if (len != 0) // does not work with paragraphs marked with -qt-paragraph-type:empty which only contain br between p elements
        {
        	text.append("\n\n"); 
        }
//        if(len != 0) { // for Qt generated html
//        	text.append('\n');
//        }
    }
	
	private static void handleBr(SpannableStringBuilder text) {
        text.append("\n");
        int len = text.length();
        text.setSpan(new BrMark(), len, len, Spannable.SPAN_MARK_MARK);
    }

    private static Object getLast(Spanned text, Class<?> kind) {
        /*
         * This knows that the last returned object from getSpans()
         * will be the most recently added.
         */
        Object[] objs = text.getSpans(0, text.length(), kind);

        if (objs.length == 0) {
            return null;
        } else {
            return objs[objs.length - 1];
        }
    }

    private static void start(SpannableStringBuilder text, Object mark) {
        int len = text.length();
        text.setSpan(mark, len, len, Spannable.SPAN_MARK_MARK);
    }

    private static void end(SpannableStringBuilder text, Class<?> kind,
                            Object repl) {
        int len = text.length();
        Object obj = getLast(text, kind);
        int where = text.getSpanStart(obj);

        text.removeSpan(obj);

        if (where != len) {
            text.setSpan(repl, where, len, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }

        return;
    }

    private static void startImg(SpannableStringBuilder text,
                                 Attributes attributes, Html.ImageGetter img) {
        String src = attributes.getValue("", "src");
        Drawable d = null;

        if (img != null) {
            d = img.getDrawable(src);
        }

        if (d == null) {
            d = Resources.getSystem().getDrawable(android.R.drawable.picture_frame);
            d.setBounds(0, 0, d.getIntrinsicWidth(), d.getIntrinsicHeight());
        }

        int len = text.length();
        text.append("\uFFFC");

        text.setSpan(new ImageSpan(d, src), len, text.length(),
                     Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }

    private static void startFont(SpannableStringBuilder text,
                                  Attributes attributes) {
        String color = attributes.getValue("", "color");
        String face = attributes.getValue("", "face");
        String sizeS = attributes.getValue("", "size");
        int size = -1;
        
        if(sizeS != null)
        	size = Math.round((float)Integer.parseInt(sizeS) * Html.ABSOLUTESIZESPAN_SCALE_FACTOR);

        int len = text.length();
        text.setSpan(new Font(color, face, size), len, len, Spannable.SPAN_MARK_MARK);
    }

    private static void endFont(SpannableStringBuilder text, float displayDensity) {
        int len = text.length();
        Object obj = getLast(text, Font.class);
        int where = text.getSpanStart(obj);

        text.removeSpan(obj);

        if (where != len) {
            Font f = (Font) obj;

            if (!TextUtils.isEmpty(f.mColor)) {
                if (f.mColor.startsWith("@")) {
                    Resources res = Resources.getSystem();
                    String name = f.mColor.substring(1);
                    int colorRes = res.getIdentifier(name, "color", "android");
                    if (colorRes != 0) {
                        ColorStateList colors = res.getColorStateList(colorRes);
                        text.setSpan(new TextAppearanceSpan(null, 0, 0, colors, null),
                                where, len,
                                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
                    }
                } else {
                    int c = getHtmlColor(f.mColor);
                    if (c != -1) {
                        text.setSpan(new ForegroundColorSpan(c | 0xFF000000),
                                where, len,
                                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
                    }
                }
            }

            if (f.mFace != null) {
                text.setSpan(new TypefaceSpan(f.mFace), where, len,
                             Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
            }
            
            if (f.mSize != -1) {
                text.setSpan(new AbsoluteSizeSpan(Math.round(f.mSize*displayDensity),true), where, len,
                             Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
            }
        }
    }

    private static void startA(SpannableStringBuilder text, Attributes attributes) {
        String href = attributes.getValue("", "href");

        int len = text.length();
        text.setSpan(new Href(href), len, len, Spannable.SPAN_MARK_MARK);
    }

    private static void endA(SpannableStringBuilder text) {
        int len = text.length();
        Object obj = getLast(text, Href.class);
        int where = text.getSpanStart(obj);

        text.removeSpan(obj);

        if (where != len) {
            Href h = (Href) obj;

            if (h.mHref != null) {
                text.setSpan(new URLSpan(h.mHref), where, len,
                             Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
            }
        }
    }

    private static void endHeader(SpannableStringBuilder text) {
        int len = text.length();
        Object obj = getLast(text, Header.class);

        int where = text.getSpanStart(obj);

        text.removeSpan(obj);

        // Back off not to change only the text, not the blank line.
        while (len > where && text.charAt(len - 1) == '\n') {
            len--;
        }

        if (where != len) {
            Header h = (Header) obj;

            text.setSpan(new RelativeSizeSpan(HEADER_SIZES[h.mLevel]),
                         where, len, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
            text.setSpan(new StyleSpan(Typeface.BOLD),
                         where, len, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
    }

    public void setDocumentLocator(Locator locator) {
    }

    public void startDocument() throws SAXException {
    }

    public void endDocument() throws SAXException {
    }

    public void startPrefixMapping(String prefix, String uri) throws SAXException {
    }

    public void endPrefixMapping(String prefix) throws SAXException {
    }

    public void startElement(String uri, String localName, String qName, Attributes attributes)
            throws SAXException {
        handleStartTag(localName, attributes);
    }

    @Override
    public void endElement(String uri, String localName, String qName) throws SAXException {
        handleEndTag(localName);
    }

    public void characters(char ch[], int start, int length) throws SAXException {
        StringBuilder sb = new StringBuilder();

        /*
         * Ignore whitespace that immediately follows other whitespace;
         * newlines count as spaces.
         */

        for (int i = 0; i < length; i++) {
            char c = ch[i + start];

            if (c == ' ' || c == '\n') {
                char pred;
                int len = sb.length();

                if (len == 0) {
                    len = mSpannableStringBuilder.length();

                    if (len == 0) {
                        pred = '\n';
                    } else {
                        pred = mSpannableStringBuilder.charAt(len - 1);
                    }
                } else {
                    pred = sb.charAt(len - 1);
                }

                if (pred != ' ' && pred != '\n') {
                    sb.append(' ');
                }
            } else {
                sb.append(c);
            }
        }

        mSpannableStringBuilder.append(sb);
    }

    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {
    }

    public void processingInstruction(String target, String data) throws SAXException {
    }

    public void skippedEntity(String name) throws SAXException {
    }

    private static class Bold { }
    private static class Italic { }
    private static class Underline { }
    private static class Big { }
    private static class Small { }
    private static class Monospace { }
    private static class Blockquote { }
    private static class Super { }
    private static class Sub { }
    
    private static class Strikethrough {}
    private static class BrMark{}
    
    // CSS Attribute, only length:0 is parsed
    
    private static class Margin{
    	public int bottom = 0;
    	public int top = 0;
    }

    private static class Font {
        public String mColor;
        public String mFace;
        public int mSize;

        public Font(String color, String face, int size) {
            mColor = color;
            mFace = face;
            mSize = size;
        }
    }

    private static class Href {
        public String mHref;

        public Href(String href) {
            mHref = href;
        }
    }

    private static class Header {
        private int mLevel;

        public Header(int level) {
            mLevel = level;
        }
    }

    private static HashMap<String,Integer> COLORS = buildColorMap();

    private static HashMap<String,Integer> buildColorMap() {
        HashMap<String,Integer> map = new HashMap<String,Integer>();
        map.put("aqua", 0x00FFFF);
        map.put("black", 0x000000);
        map.put("blue", 0x0000FF);
        map.put("fuchsia", 0xFF00FF);
        map.put("green", 0x008000);
        map.put("grey", 0x808080);
        map.put("lime", 0x00FF00);
        map.put("maroon", 0x800000);
        map.put("navy", 0x000080);
        map.put("olive", 0x808000);
        map.put("purple", 0x800080);
        map.put("red", 0xFF0000);
        map.put("silver", 0xC0C0C0);
        map.put("teal", 0x008080);
        map.put("white", 0xFFFFFF);
        map.put("yellow", 0xFFFF00);
        return map;
    }

    /**
     * Converts an HTML color (named or numeric) to an integer RGB value.
     *
     * @param color Non-null color string.
     * @return A color value, or {@code -1} if the color string could not be interpreted.
     */
    private static int getHtmlColor(String color) {
        Integer i = COLORS.get(color.toLowerCase());
        if (i != null) {
            return i;
        } else {
            try {
                return convertValueToInt(color, -1);
            } catch (NumberFormatException nfe) {
                return -1;
            }
        }
      }
    
    private static final int
    convertValueToInt(CharSequence charSeq, int defaultValue)
    {
        if (null == charSeq)
            return defaultValue;

        String nm = charSeq.toString();

        int sign = 1;
        int index = 0;
        int len = nm.length();
        int base = 10;

        if ('-' == nm.charAt(0)) {
            sign = -1;
            index++;
        }

        if ('0' == nm.charAt(index)) {
            //  Quick check for a zero by itself
            if (index == (len - 1))
                return 0;

            char    c = nm.charAt(index + 1);

            if ('x' == c || 'X' == c) {
                index += 2;
                base = 16;
            } else {
                index++;
                base = 8;
            }
        }
        else if ('#' == nm.charAt(index))
        {
            index++;
            base = 16;
        }

        return Integer.parseInt(nm.substring(index), base) * sign;
    }
    
    // tokenize e.g. <span style="font-family:'Cantarell'; font-weight:600; text-decoration: underline;  background-color:#ff5500;">
    static HashMap<String,String> tokenizeStyle(String styleAttribute)
	{   	
		HashMap<String, String> map = new HashMap<String,String>();
		String[] splitted = styleAttribute.split(";");
		String[] colonSplitted;
		for(String s: splitted)
		{
			colonSplitted = s.split(":");
			if(colonSplitted.length >= 2)
			map.put(colonSplitted[0].trim(), colonSplitted[1].trim());
		}
		return map;		
	}
    
    /**
     * a content handler which can be used to handle elements that shoudl be ignored
     * @author taiko
     *
     */
    public class IgnoringContentHandler extends DefaultHandler {

        private int depth = 1;
        private XMLReader mReader;
        private ContentHandler mContentHandler;

        public IgnoringContentHandler(XMLReader xmlReader, ContentHandler contentHandler) {
            this.mContentHandler = contentHandler;
            this.mReader = xmlReader;
        }

        public void startElement(String uri, String localName, String qName,
                Attributes atts) throws SAXException {
            depth++;
        }

        public void endElement(String uri, String localName, String qName)
                throws SAXException {
            depth--;
            if(0 == depth) {
               mReader.setContentHandler(mContentHandler);
            }
        }

    }
    
    
}



